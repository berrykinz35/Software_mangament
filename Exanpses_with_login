import tkinter as tk
from tkinter import messagebox
import sqlite3

# Function to initialize the database
def initialize_database():
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT)''')
    c.execute('''CREATE TABLE IF NOT EXISTS expenses
                 (id INTEGER PRIMARY KEY, user_id INTEGER, item TEXT, amount REAL,
                 FOREIGN KEY (user_id) REFERENCES users(id))''')
    conn.commit()
    conn.close()

# Function to add a new user
def register_user(username, password):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, password))
        conn.commit()
        messagebox.showinfo("Success", "Registration successful!")
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "Username already exists. Please choose another username.")
    conn.close()

# Function to authenticate a user
def authenticate_user(username, password):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
    user = c.fetchone()
    conn.close()
    return user

# Function to add an expense
def add_expense(user_id, item, amount):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("INSERT INTO expenses (user_id, item, amount) VALUES (?, ?, ?)", (user_id, item, amount))
    conn.commit()
    conn.close()

# Function to view expenses for a user
def view_expenses(user_id):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("SELECT * FROM expenses WHERE user_id=?", (user_id,))
    expenses = c.fetchall()
    conn.close()
    return expenses

# Function to handle the 'Add Expense' button click event
def add_expense_click():
    item = item_entry.get()
    amount = amount_entry.get()
    if item and amount:
        try:
            amount = float(amount)
            add_expense(current_user[0], item, amount)
            messagebox.showinfo("Success", "Expense added successfully!")
            item_entry.delete(0, tk.END)
            amount_entry.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("Error", "Amount must be a number.")
    else:
        messagebox.showerror("Error", "Please fill in all fields.")

# Function to handle the 'View Expenses' button click event
def view_expenses_click():
    expenses = view_expenses(current_user[0])
    if expenses:
        expense_listbox.delete(0, tk.END)
        for expense in expenses:
            expense_listbox.insert(tk.END, f"ID: {expense[0]}, Item: {expense[2]}, Amount: ${expense[3]}")
    else:
        messagebox.showinfo("Info", "No expenses found.")

# Function to handle the login button click event
def login_click():
    username = username_entry.get()
    password = password_entry.get()
    user = authenticate_user(username, password)
    if user:
        global current_user
        current_user = user
        login_window.destroy()
        main_window.deiconify()
        view_expenses_click()
    else:
        messagebox.showerror("Error", "Invalid username or password.")

# Function to handle the 'Logout' button click event
def logout_click():
    main_window.withdraw()
    login_window.deiconify()
    username_entry.delete(0, tk.END)
    password_entry.delete(0, tk.END)

# Initialize the database
initialize_database()

# Create the login window
login_window = tk.Tk()
login_window.title("Login")

# Create and place the widgets for the login window
username_label = tk.Label(login_window, text="Username:")
username_label.grid(row=0, column=0, padx=5, pady=5)

username_entry = tk.Entry(login_window)
username_entry.grid(row=0, column=1, padx=5, pady=5)

password_label = tk.Label(login_window, text="Password:")
password_label.grid(row=1, column=0, padx=5, pady=5)

password_entry = tk.Entry(login_window, show="*")
password_entry.grid(row=1, column=1, padx=5, pady=5)

login_button = tk.Button(login_window, text="Login", command=login_click)
login_button.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

# Create the main window
main_window = tk.Toplevel(login_window)
main_window.title("Expense Manager")
main_window.protocol("WM_DELETE_WINDOW", logout_click)
main_window.withdraw()

# Create and place the widgets for the main window
item_label = tk.Label(main_window, text="Item:")
item_label.grid(row=0, column=0, padx=5, pady=5)

item_entry = tk.Entry(main_window)
item_entry.grid(row=0, column=1, padx=5, pady=5)

amount_label = tk.Label(main_window, text="Amount:")
amount_label.grid(row=1, column=0, padx=5, pady=5)

amount_entry = tk.Entry(main_window)
amount_entry.grid(row=1, column=1, padx=5, pady=5)

add_button = tk.Button(main_window, text="Add Expense", command=add_expense_click)
add_button.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

view_button = tk.Button(main_window, text="View Expenses", command=view_expenses_click)
view_button.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

expense_listbox = tk.Listbox(main_window, height=10, width=50)
expense_listbox.grid(row=4, column=0, columnspan=2, padx=5, pady=5)

# Start the main loop
login_window.mainloop()
