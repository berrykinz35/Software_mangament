import tkinter as tk
from tkinter import messagebox
from tkinter import simpledialog
import sqlite3


# Function to initialize the database
def initialize_database():
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS expenses
                 (id INTEGER PRIMARY KEY, item TEXT, amount REAL, category TEXT)''')
    conn.commit()
    conn.close()
initialize_database()

# Function to add an expense
def add_expense(item, amount, category):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("INSERT INTO expenses (item, amount, category) VALUES (?, ?, ?)", (item, amount, category))
    conn.commit()
    conn.close()


# Function to edit an expense
def edit_expense(id, new_item, new_amount, new_category):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("UPDATE expenses SET item=?, amount=?, category=? WHERE id=?", (new_item, new_amount, new_category, id))
    conn.commit()
    conn.close()


# Function to delete an expense
def delete_expense(id):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    c.execute("DELETE FROM expenses WHERE id=?", (id,))
    conn.commit()
    conn.close()


# Function to view expenses
def view_expenses(category=None):
    conn = sqlite3.connect('expenses.db')
    c = conn.cursor()
    if category:
        c.execute("SELECT * FROM expenses WHERE category=?", (category,))
    else:
        c.execute("SELECT * FROM expenses")
    expenses = c.fetchall()
    conn.close()
    return expenses


# Function to handle the 'Add Expense' button click event
def add_expense_click():
    item = item_entry.get()
    amount = amount_entry.get()
    category = category_entry.get()
    if item and amount and category:
        try:
            amount = float(amount)
            add_expense(item, amount, category)
            messagebox.showinfo("Success", "Expense added successfully!")
            item_entry.delete(0, tk.END)
            amount_entry.delete(0, tk.END)
            category_entry.delete(0, tk.END)
        except ValueError:
            messagebox.showerror("Error", "Amount must be a number.")
    else:
        messagebox.showerror("Error", "Please fill in all fields.")


# Function to handle the 'View Expenses' button click event
def view_expenses_click():
    expenses = view_expenses()
    if expenses:
        expense_listbox.delete(0, tk.END)
        for expense in expenses:
            expense_listbox.insert(tk.END,
                                   f"ID: {expense[0]}, Item: {expense[1]}, Amount: ${expense[2]}, Category: {expense[3]}")
    else:
        messagebox.showinfo("Info", "No expenses found.")


# Function to handle the 'Delete Expense' button click event
def delete_expense_click():
    selected_index = expense_listbox.curselection()
    if selected_index:
        id = int(expense_listbox.get(selected_index)[4:5])
        delete_expense(id)
        messagebox.showinfo("Success", "Expense deleted successfully!")
        view_expenses_click()
    else:
        messagebox.showerror("Error", "Please select an expense to delete.")


# Function to handle the 'Spending Limits' button click event
def set_spending_limits():
    global root
    root.withdraw()

    limit_window = tk.Toplevel()
    limit_window.title("Set Spending Limits")

    categories = ["Food", "Transportation", "Entertainment", "Utilities", "Others"]

    def save_limits():
        limits = {}
        for category in categories:
            limit = limit_entries[category].get()
            if limit:
                try:
                    limit = float(limit)
                    limits[category] = limit
                except ValueError:
                    messagebox.showerror("Error", f"Invalid limit for {category}. Please enter a valid number.")
                    return
        messagebox.showinfo("Success", "Spending limits saved successfully!")
        limit_window.destroy()
        root.deiconify()

    limit_entries = {}
    for i, category in enumerate(categories):
        tk.Label(limit_window, text=f"{category} Limit:").grid(row=i, column=0, padx=5, pady=5)
        limit_entries[category] = tk.Entry(limit_window)
        limit_entries[category].grid(row=i, column=1, padx=5, pady=5)

    save_button = tk.Button(limit_window, text="Save", command=save_limits)
    save_button.grid(row=len(categories), columnspan=2, padx=5, pady=5, sticky="WE")


# function to handle the 'invite friends' button click event
def invite_expense_report():
    friend_number = simpledialog.askstring("Invite Friend", "Enter friend's phone number:")
    if friend_number:
        self.invited_friends.add(friend_number)
        self.status_label.config(text=f"{friend_number} has been invited!.")
    else:
        print("Error, friend's number not provided")


# Initialize the database
initialize_database()

# Create the main window
root = tk.Tk()
root.title("Expense Manager")

# Create and place the widgets
item_label = tk.Label(root, text="Item:")
item_label.grid(row=0, column=0, padx=5, pady=5)

item_entry = tk.Entry(root)
item_entry.grid(row=0, column=1, padx=5, pady=5)

amount_label = tk.Label(root, text="Amount:")
amount_label.grid(row=1, column=0, padx=5, pady=5)

amount_entry = tk.Entry(root)
amount_entry.grid(row=1, column=1, padx=5, pady=5)

category_label = tk.Label(root, text="Category:")
category_label.grid(row=2, column=0, padx=5, pady=5)

category_entry = tk.Entry(root)
category_entry.grid(row=2, column=1, padx=5, pady=5)

add_button = tk.Button(root, text="Add Expense", command=add_expense_click)
add_button.grid(row=3, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

view_button = tk.Button(root, text="View Expenses", command=view_expenses_click)
view_button.grid(row=4, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

delete_button = tk.Button(root, text="Delete Expense", command=delete_expense_click)
delete_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

limit_button = tk.Button(root, text="Spending Limits", command=set_spending_limits)
limit_button.grid(row=6, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

invite_button = tk.Button(root, text="Invite Friends", command=invite_expense_report)
invite_button.grid(row=7, column=0, columnspan=2, padx=5, pady=5, sticky="WE")

expense_listbox = tk.Listbox(root, height=10, width=50)
expense_listbox.grid(row=8, column=0, columnspan=2, padx=5, pady=5)

# Start the main loop
root.mainloop()

